[{"/Users/doberman/projects/foss-force-graph/src/index.tsx":"1","/Users/doberman/projects/foss-force-graph/src/App.tsx":"2","/Users/doberman/projects/foss-force-graph/src/components/forceGraph/data.ts":"3","/Users/doberman/projects/foss-force-graph/src/components/forceGraph/formatData.ts":"4","/Users/doberman/projects/foss-force-graph/src/components/forceGraph/index.tsx":"5","/Users/doberman/projects/foss-force-graph/src/helpers.js":"6","/Users/doberman/projects/foss-force-graph/src/components/forceGraph/handleCollision.js":"7","/Users/doberman/projects/foss-force-graph/src/components/forceGraph/nodeFunctions.ts":"8","/Users/doberman/projects/foss-force-graph/src/components/forceGraph/layoutPreset.ts":"9"},{"size":219,"mtime":1612796542476,"results":"10","hashOfConfig":"11"},{"size":902,"mtime":1612795993239,"results":"12","hashOfConfig":"11"},{"size":1205,"mtime":1612795993240,"results":"13","hashOfConfig":"11"},{"size":1086,"mtime":1612795993240,"results":"14","hashOfConfig":"11"},{"size":4389,"mtime":1612795993240,"results":"15","hashOfConfig":"11"},{"size":521,"mtime":1612796336982,"results":"16","hashOfConfig":"11"},{"size":850,"mtime":1612799437523,"results":"17","hashOfConfig":"11"},{"size":2159,"mtime":1612795993241,"results":"18","hashOfConfig":"11"},{"size":405,"mtime":1612795993241,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ik6xot",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/doberman/projects/foss-force-graph/src/index.tsx",[],"/Users/doberman/projects/foss-force-graph/src/App.tsx",["44"],"import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components/macro\";\n\nimport ForceGraph from \"./components/forceGraph\";\nimport inputData from \"./components/forceGraph/data\";\n\nconsole.log(\"data\", inputData);\n\nconst Main = styled.main`\n  width: 100%;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  display: flex;\n`;\n\nconst Section = styled.div`\n  width: 100%;\n  max-width: 600px;\n  height: 100vh; //temp\n  padding: 0 20px;\n  margin: 0 auto;\n  background-color: #eee;\n`;\n\nconst InfoSection = styled(Section)`\n  width: 100%;\n  padding: 0 10px;\n\n  & * {\n    text-align: left;\n  }\n`;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>FOSS playground FUND</h1>\n      </header>\n\n      <Main>\n        <Section>\n          <ForceGraph data={inputData} />\n        </Section>\n      </Main>\n    </div>\n  );\n}\n\nexport default App;\n",["45","46"],"/Users/doberman/projects/foss-force-graph/src/components/forceGraph/data.ts",[],"/Users/doberman/projects/foss-force-graph/src/components/forceGraph/formatData.ts",["47"],"import { Node } from \"./data\";\nimport { clone } from \"../../helpers\";\n\nexport interface Link {\n  source: string;\n  target: string;\n}\n\nconst createNodes = (input: Node[]) => {\n  let nodes: Node[] = clone(input);\n\n  // add Children\n  nodes.forEach(({ id, deps }) => {\n    if (!deps) return;\n\n    deps.forEach((depId) => {\n      const depNode = nodes.find((n) => n.id === depId);\n      if (!depNode) return;\n\n      if (!Array.isArray(depNode.children)) depNode.children = [];\n      depNode.children.push(id);\n    });\n  });\n\n  return nodes;\n};\n\nconst createLinks = (nodes: Node[]) => {\n  let links: Link[] = [];\n  // const parents = nodes.filter(n => !!n.children);\n\n  nodes.forEach((node: Node) => {\n    if (!node.deps) return;\n\n    node.deps.forEach((depId: string) => {\n      links.push({\n        source: depId,\n        target: node.id,\n      });\n    });\n  });\n\n  return links;\n};\n\nexport interface Data {\n  nodes: Node[];\n  links: Link[];\n}\n\nexport default (input: Node[]) => {\n  const data = clone(input);\n  return {\n    nodes: createNodes(data),\n    links: createLinks(data),\n  };\n};\n","/Users/doberman/projects/foss-force-graph/src/components/forceGraph/index.tsx",["48","49","50"],"import React, {\n  useReducer,\n  useEffect,\n  useRef,\n  MutableRefObject,\n  Reducer,\n  useState,\n} from \"react\";\nimport ForceGraph2D, { ForceGraphMethods } from \"react-force-graph-2d\";\nimport styled from \"styled-components/macro\";\nimport { nodeRenderObject, centerAndFit } from \"./nodeFunctions\";\nimport layoutPreset from \"./layoutPreset\";\nimport { clone } from \"../../helpers\";\nimport handleCollision, { rescueNode } from \"./handleCollision\";\nimport { Data } from \"./formatData\";\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h2`\n  text-align: left;\n  font-family: serif;\n  font-weight: 100;\n  font-size: 3.4em;\n`;\nconst GraphRow = styled.div`\n  position: absolute;\n  right: 0;\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst Settings = styled.div`\n  position: relative;\n  z-index: 1;\n  width: fit-content;\n`;\n\nconst settingStyle = `\n    width: 150px;\n    height: 40px;\n    border-radius: 30px;\n    background-color: #fff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 10px 0;\n    position: relative;\n    z-index: 1;\n`;\n\nconst Setting = styled.div`\n  ${settingStyle}\n\n  > * {\n    font-size: 0.8em;\n  }\n\n  > input {\n    width: 20px;\n  }\n`;\n\nconst SettingsBtn = styled.button`\n  ${settingStyle}\n  font-weight: 700;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  justify-content: center;\n`;\n\ninterface Settings {\n  [key: string]: boolean;\n}\n\nconst initialSettings: Settings = {\n  particles: true,\n  arrows: false,\n};\n\nconst settingsReducer: any = (state: Settings, key: string) => ({\n  ...state,\n  [key]: !state[key],\n});\n\ninterface Props {\n  data: Data;\n  width?: number;\n  height?: number;\n}\n\nconst Graph = ({\n  data,\n  width = layoutPreset.width,\n  height = layoutPreset.height,\n}: Props) => {\n  const graphRef: MutableRefObject<ForceGraphMethods | undefined> = useRef();\n\n  const [settings, toggleSetting] = useReducer<Reducer<Settings, string>>(\n    settingsReducer,\n    clone(initialSettings)\n  );\n\n  const [canvasSize, setCanvasSize] = useState({ width, height });\n\n  const onResize = () => {\n    const newSize = {\n      width: window.innerWidth * 0.6,\n      height: window.innerHeight * 0.6,\n    };\n\n    setCanvasSize(newSize);\n  };\n\n  const syncGraphView = () => {\n    if (!graphRef.current || !data.nodes.length) return;\n    handleCollision(graphRef.current, data.nodes, canvasSize);\n    centerAndFit(graphRef.current, data.nodes);\n  };\n\n  useEffect(() => {\n    if (!graphRef.current || !data.nodes.length) return;\n\n    syncGraphView();\n  }, [graphRef, canvasSize]);\n\n  useEffect(() => {\n    setCanvasSize({\n      width: window.innerWidth * 0.6,\n      height: window.innerHeight * 0.6,\n    });\n\n    window.addEventListener(\"resize\", onResize, false);\n    return () => window.removeEventListener(\"resize\", onResize, false);\n  }, []);\n\n  return (\n    <Container>\n      <Title>\n        Packages we think are <br /> important to you\n      </Title>\n\n      <Settings>\n        {Object.entries(settings).map(([key, val]) => {\n          return (\n            <Setting key={key}>\n              <SettingsBtn onClick={() => toggleSetting(key)}>\n                <input type=\"checkbox\" checked={val} onChange={() => {}} />\n                <div>{key}</div>\n              </SettingsBtn>\n            </Setting>\n          );\n        })}\n      </Settings>\n\n      <GraphRow>\n        {data.nodes.length && (\n          <ForceGraph2D\n            ref={graphRef}\n            graphData={data}\n            cooldownTime={Infinity}\n            d3AlphaDecay={0}\n            d3VelocityDecay={0}\n            width={canvasSize.width}\n            height={canvasSize.height}\n            backgroundColor=\"\"\n            nodeRelSize={5}\n            nodeLabel={(node: any) => node.name || \"\"}\n            linkDirectionalParticles={settings.particles ? 3 : 0}\n            linkDirectionalParticleWidth={1}\n            linkDirectionalParticleSpeed={1.002}\n            linkDirectionalArrowLength={settings.arrows ? 1 : 0}\n            linkWidth={1}\n            linkColor={layoutPreset.colors.white}\n            nodeCanvasObject={nodeRenderObject}\n            enableZoomPanInteraction={false}\n            onNodeDragEnd={() => {\n              centerAndFit(graphRef.current, data.nodes);\n            }}\n          />\n        )}\n      </GraphRow>\n    </Container>\n  );\n};\n\nexport default Graph;\n","/Users/doberman/projects/foss-force-graph/src/helpers.js",[],["51","52"],"/Users/doberman/projects/foss-force-graph/src/components/forceGraph/handleCollision.js",["53","54"],"/Users/doberman/projects/foss-force-graph/src/components/forceGraph/nodeFunctions.ts",["55","56","57"],"import { MutableRefObject } from \"react\";\n\nimport { Node } from \"./data\";\nimport { NodeObject, ForceGraphMethods } from \"react-force-graph-2d\";\n\nimport layoutPreset from \"./layoutPreset\";\nimport { rescueNode } from \"./handleCollision\";\n\nconst { colors, fontSizes } = layoutPreset;\n\ntype GraphInstance = ForceGraphMethods | undefined;\n\nexport const nodeRenderObject = (node: any, ctx: any, globalScale: number) => {\n  const projectNode = node.id === \"<project>\";\n\n  const lvl = projectNode ? 0 : !!node.children ? 1 : 2;\n\n  node.vy = 0;\n  node.vx = 0;\n\n  // todo, link-must follow coords\n  // node.x = projectNode ? 0 : node.x;\n  // node.y = projectNode ? 0 : node.y;\n\n  const nodeColor = node.color\n    ? node.color\n    : projectNode\n    ? \"#000\"\n    : colors.blue;\n  const arcRadius = projectNode ? 0.4 : 0.3;\n\n  const label = node.name;\n  const fontSizeDividend = fontSizes[lvl];\n  const fontSize = fontSizeDividend / globalScale;\n\n  ctx.font = `${fontSize}px Roboto`;\n  const textWidth = ctx.measureText(label).width;\n  const bckgDimensions = [textWidth, fontSize].map((n) => n + fontSize * 0.5);\n\n  ctx.fillStyle = \"rgba(0, 0, 0, 0)\";\n  !!node.x &&\n    !!node.y &&\n    ctx.fillRect(\n      node.x - bckgDimensions[0] / 2,\n      node.y - bckgDimensions[1] / 2,\n      ...bckgDimensions\n    );\n\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"bottom\";\n  ctx.textMargin = \"0 0 25px\";\n\n  ctx.fillStyle = nodeColor;\n  typeof node.x === \"number\" &&\n    typeof node.y === \"number\" &&\n    ctx.fillText(label, node.x, node.y - bckgDimensions[1] * 0.4);\n\n  ctx.strokeStyle = nodeColor;\n  ctx.fillStyle = nodeColor;\n  ctx.beginPath();\n  ctx.arc(node.x, node.y, arcRadius, 0, 2 * Math.PI, false);\n  ctx.fill();\n\n  return ctx;\n};\n\nconst padding = 20;\nconst readyForZoom = 300;\nconst zoomDuration = 700;\n\nexport const centerAndFit = (graphInstance: GraphInstance, nodes: Node[]) => {\n  if (!graphInstance) return;\n\n  const topNode = nodes.find((n) => n.id === \"<project>\");\n\n  if (topNode) {\n    topNode.x = 0;\n    topNode.y = 0;\n  }\n  setTimeout(() => {\n    if (!graphInstance) return;\n\n    graphInstance.zoomToFit(zoomDuration, padding);\n  }, readyForZoom + 100);\n};\n","/Users/doberman/projects/foss-force-graph/src/components/forceGraph/layoutPreset.ts",[],{"ruleId":"58","severity":1,"message":"59","line":26,"column":7,"nodeType":"60","messageId":"61","endLine":26,"endColumn":18},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":51,"column":1,"nodeType":"68","endLine":57,"endColumn":3},{"ruleId":"58","severity":1,"message":"69","line":14,"column":27,"nodeType":"60","messageId":"61","endLine":14,"endColumn":37},{"ruleId":"70","severity":1,"message":"71","line":77,"column":11,"nodeType":"60","messageId":"72","endLine":77,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":130,"column":6,"nodeType":"75","endLine":130,"endColumn":28,"suggestions":"76"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":17,"column":1,"nodeType":"68","endLine":35,"endColumn":3},{"ruleId":"77","severity":1,"message":"78","line":30,"column":13,"nodeType":"60","messageId":"61","endLine":30,"endColumn":20},{"ruleId":"58","severity":1,"message":"79","line":1,"column":10,"nodeType":"60","messageId":"61","endLine":1,"endColumn":26},{"ruleId":"58","severity":1,"message":"80","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":20},{"ruleId":"58","severity":1,"message":"69","line":7,"column":10,"nodeType":"60","messageId":"61","endLine":7,"endColumn":20},"@typescript-eslint/no-unused-vars","'InfoSection' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'rescueNode' is defined but never used.","@typescript-eslint/no-redeclare","'Settings' is already defined.","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data.nodes.length' and 'syncGraphView'. Either include them or remove the dependency array.","ArrayExpression",["83"],"no-unused-vars","'topNode' is assigned a value but never used.","'MutableRefObject' is defined but never used.","'NodeObject' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [graphRef, canvasSize, data.nodes.length, syncGraphView]",{"range":"86","text":"87"},[2586,2608],"[graphRef, canvasSize, data.nodes.length, syncGraphView]"]